public final class java.lang.StringBuilder extends java.lang.AbstractStringBuilder
{
    // Constructors
    public final java.lang.StringBuilder();
    public final java.lang.StringBuilder(int);
    public final java.lang.StringBuilder(java.lang.CharSequence);
    public final java.lang.StringBuilder(java.lang.String);
    // Methods
    private java.lang.StringBuilder append(java.lang.StringBuilder);
    private void readObject(java.io.ObjectInputStream);
    private void writeObject(java.io.ObjectOutputStream);
    public volatile java.lang.AbstractStringBuilder append(char);
    public volatile java.lang.AbstractStringBuilder append(double);
    public volatile java.lang.AbstractStringBuilder append(float);
    public volatile java.lang.AbstractStringBuilder append(int);
    public volatile java.lang.AbstractStringBuilder append(long);
    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence);
    public volatile java.lang.AbstractStringBuilder append(java.lang.CharSequence, int, int);
    public volatile java.lang.AbstractStringBuilder append(java.lang.Object);
    public volatile java.lang.AbstractStringBuilder append(java.lang.String);
    public volatile java.lang.AbstractStringBuilder append(java.lang.StringBuffer);
    public volatile java.lang.AbstractStringBuilder append(boolean);
    public volatile java.lang.AbstractStringBuilder append([C);
    public volatile java.lang.AbstractStringBuilder append([C, int, int);
    public volatile java.lang.Appendable append(char);
    public volatile java.lang.Appendable append(java.lang.CharSequence);
    public volatile java.lang.Appendable append(java.lang.CharSequence, int, int);
    public java.lang.StringBuilder append(char);
    public java.lang.StringBuilder append(double);
    public java.lang.StringBuilder append(float);
    public java.lang.StringBuilder append(int);
    public java.lang.StringBuilder append(long);
    public java.lang.StringBuilder append(java.lang.CharSequence);
    public java.lang.StringBuilder append(java.lang.CharSequence, int, int);
    public java.lang.StringBuilder append(java.lang.Object);
    public java.lang.StringBuilder append(java.lang.String);
    public java.lang.StringBuilder append(java.lang.StringBuffer);
    public java.lang.StringBuilder append(boolean);
    public java.lang.StringBuilder append([C);
    public java.lang.StringBuilder append([C, int, int);
    public volatile java.lang.AbstractStringBuilder appendCodePoint(int);
    public java.lang.StringBuilder appendCodePoint(int);
    public volatile int capacity();
    public volatile char charAt(int);
    public volatile int codePointAt(int);
    public volatile int codePointBefore(int);
    public volatile int codePointCount(int, int);
    public volatile java.lang.AbstractStringBuilder delete(int, int);
    public java.lang.StringBuilder delete(int, int);
    public volatile java.lang.AbstractStringBuilder deleteCharAt(int);
    public java.lang.StringBuilder deleteCharAt(int);
    public volatile void ensureCapacity(int);
    public volatile void getChars(int, int, [C, int);
    public int indexOf(java.lang.String);
    public int indexOf(java.lang.String, int);
    public volatile java.lang.AbstractStringBuilder insert(int, char);
    public volatile java.lang.AbstractStringBuilder insert(int, double);
    public volatile java.lang.AbstractStringBuilder insert(int, float);
    public volatile java.lang.AbstractStringBuilder insert(int, int);
    public volatile java.lang.AbstractStringBuilder insert(int, long);
    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence);
    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.CharSequence, int, int);
    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.Object);
    public volatile java.lang.AbstractStringBuilder insert(int, java.lang.String);
    public volatile java.lang.AbstractStringBuilder insert(int, boolean);
    public volatile java.lang.AbstractStringBuilder insert(int, [C);
    public volatile java.lang.AbstractStringBuilder insert(int, [C, int, int);
    public java.lang.StringBuilder insert(int, char);
    public java.lang.StringBuilder insert(int, double);
    public java.lang.StringBuilder insert(int, float);
    public java.lang.StringBuilder insert(int, int);
    public java.lang.StringBuilder insert(int, long);
    public java.lang.StringBuilder insert(int, java.lang.CharSequence);
    public java.lang.StringBuilder insert(int, java.lang.CharSequence, int, int);
    public java.lang.StringBuilder insert(int, java.lang.Object);
    public java.lang.StringBuilder insert(int, java.lang.String);
    public java.lang.StringBuilder insert(int, boolean);
    public java.lang.StringBuilder insert(int, [C);
    public java.lang.StringBuilder insert(int, [C, int, int);
    public int lastIndexOf(java.lang.String);
    public int lastIndexOf(java.lang.String, int);
    public volatile int length();
    public volatile int offsetByCodePoints(int, int);
    public volatile java.lang.AbstractStringBuilder replace(int, int, java.lang.String);
    public java.lang.StringBuilder replace(int, int, java.lang.String);
    public volatile java.lang.AbstractStringBuilder reverse();
    public java.lang.StringBuilder reverse();
    public volatile void setCharAt(int, char);
    public volatile void setLength(int);
    public volatile java.lang.CharSequence subSequence(int, int);
    public volatile java.lang.String substring(int);
    public volatile java.lang.String substring(int, int);
    public java.lang.String toString();
    public volatile void trimToSize();
    // Fields
    static final long serialVersionUID;
}