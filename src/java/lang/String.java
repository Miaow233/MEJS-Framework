public final class java.lang.String
{
    // Constructors
    public final java.lang.String();
    public final java.lang.String(int, int, [C);
    public final java.lang.String(java.lang.String);
    public final java.lang.String(java.lang.StringBuffer);
    public final java.lang.String(java.lang.StringBuilder);
    public final java.lang.String([B);
    public final java.lang.String([B, int);
    public final java.lang.String([B, int, int);
    public final java.lang.String([B, int, int, int);
    public final java.lang.String([B, int, int, java.lang.String);
    public final java.lang.String([B, int, int, java.nio.charset.Charset);
    public final java.lang.String([B, java.lang.String);
    public final java.lang.String([B, java.nio.charset.Charset);
    public final java.lang.String([C);
    public final java.lang.String([C, int, int);
    public final java.lang.String([I, int, int);
    // Methods
    public static java.lang.String copyValueOf([C);
    public static java.lang.String copyValueOf([C, int, int);
    private native int fastIndexOf(int, int);
    private native java.lang.String fastSubstring(int, int);
    public static transient java.lang.String format(java.lang.String, [Ljava.lang.Object;);
    public static transient java.lang.String format(java.util.Locale, java.lang.String, [Ljava.lang.Object;);
    static int indexOf(java.lang.String, java.lang.String, int);
    static int indexOf([C, int, int, [C, int, int, int);
    private int indexOfSupplementary(int, int);
    static int lastIndexOf(java.lang.String, java.lang.String, int);
    static int lastIndexOf([C, int, int, [C, int, int, int);
    private int lastIndexOfSupplementary(int, int);
    public static java.lang.String valueOf(char);
    public static java.lang.String valueOf(double);
    public static java.lang.String valueOf(float);
    public static java.lang.String valueOf(int);
    public static java.lang.String valueOf(long);
    public static java.lang.String valueOf(java.lang.Object);
    public static java.lang.String valueOf(boolean);
    public static java.lang.String valueOf([C);
    public static java.lang.String valueOf([C, int, int);
    public native char charAt(int);
    public int codePointAt(int);
    public int codePointBefore(int);
    public int codePointCount(int, int);
    public volatile int compareTo(java.lang.Object);
    public native int compareTo(java.lang.String);
    public int compareToIgnoreCase(java.lang.String);
    public native java.lang.String concat(java.lang.String);
    public boolean contains(java.lang.CharSequence);
    public boolean contentEquals(java.lang.CharSequence);
    public boolean contentEquals(java.lang.StringBuffer);
    public boolean endsWith(java.lang.String);
    public boolean equals(java.lang.Object);
    public boolean equalsIgnoreCase(java.lang.String);
    public void getBytes(int, int, [B, int);
    public [B getBytes();
    public [B getBytes(java.lang.String);
    public [B getBytes(java.nio.charset.Charset);
    public void getChars(int, int, [C, int);
    native void getCharsNoCheck(int, int, [C, int);
    public int hashCode();
    public int indexOf(int);
    public int indexOf(int, int);
    public int indexOf(java.lang.String);
    public int indexOf(java.lang.String, int);
    public native java.lang.String intern();
    public boolean isEmpty();
    public int lastIndexOf(int);
    public int lastIndexOf(int, int);
    public int lastIndexOf(java.lang.String);
    public int lastIndexOf(java.lang.String, int);
    public int length();
    public boolean matches(java.lang.String);
    public int offsetByCodePoints(int, int);
    public boolean regionMatches(int, java.lang.String, int, int);
    public boolean regionMatches(boolean, int, java.lang.String, int, int);
    public java.lang.String replace(char, char);
    public java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence);
    public java.lang.String replaceAll(java.lang.String, java.lang.String);
    public java.lang.String replaceFirst(java.lang.String, java.lang.String);
    native void setCharAt(int, char);
    public [Ljava.lang.String; split(java.lang.String);
    public [Ljava.lang.String; split(java.lang.String, int);
    public boolean startsWith(java.lang.String);
    public boolean startsWith(java.lang.String, int);
    public java.lang.CharSequence subSequence(int, int);
    public java.lang.String substring(int);
    public java.lang.String substring(int, int);
    public native [C toCharArray();
    public java.lang.String toLowerCase();
    public java.lang.String toLowerCase(java.util.Locale);
    public java.lang.String toString();
    public java.lang.String toUpperCase();
    public java.lang.String toUpperCase(java.util.Locale);
    public java.lang.String trim();
    // Fields
    private final int count;
    private int hash;
    public static final java.util.Comparator CASE_INSENSITIVE_ORDER;
    private static final [Ljava.io.ObjectStreamField; serialPersistentFields;
    private static final long serialVersionUID;
}